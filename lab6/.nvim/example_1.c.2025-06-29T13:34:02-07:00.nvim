Last login: Sun Jun 29 11:49:06 on console
harrygupta@Harrys-MacBook-Pro-6 ~ % docker start -ai cmpt201

Updating Oh My Zsh
master

Features:

 - f802298 [ubuntu]   Add `apt-fast` support (#13175)
 - f9d3e0f [wd]       Update to v0.10.1 (#13192)

Bug fixes:

 - cb72d7d [af-magic] Fix venv prompt counting parenthesis (#13190)
 - 2fbdfa9 [init]     Ensure hostname is always valid for macOS (#13171)
 - 0143350 [rbw]      Reset clipboard in `rbwpw` only in the last invocation (#13185)

You can see the changelog with `omz changelog`
         __                                     __
  ____  / /_     ____ ___  __  __   ____  _____/ /_
 / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \
/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /
\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/
                        /____/

Hooray! Oh My Zsh has been updated!

To keep up with the latest news and updates, follow us on X: https://x.com/ohmyzsh
Want to get involved in the community? Join our Discord: https://discord.gg/ohmyzsh
Get your Oh My Zsh swag at: https://shop.planetargon.com/collections/oh-my-zsh

Ｗｅｌｃｏｍｅ  ｔｏ  ＣＭＰＴ  ２０１！

"The functional programmer sounds rather like a mediæval monk, denying himself the pleasures of life in the hope that it will make him virtuous."
	-- John Hughes, Why Functional Programming Matters

~❯ ls
cmpt201-coursework  lecture  log.c  start_here.sh  testDirect  units  work
~❯ clear
 example_1.c +
    1 #include <stdbool.h>#include <stdint.h>
    2 #include <stdio.h>
    3 #include <stdlib.h>
    4
    5 #define ASSERT(expr)                                                           \
    6 ┆ {                                                                            \
    7 ┆ ┆ if (!(expr)) {                                                             \
    8 ┆ ┆ ┆ fprintf(stderr, "Assertion failed: %s\n", #expr);                        \
    9 ┆ ┆ ┆ exit(1);                                                                 \
   10 ┆ ┆ }                                                                          \
   11 ┆ }
   12
   13 #define TEST(expr)                                                             \
   14 ┆ {                                                                            \
   15 ┆ ┆ if (!(expr)) {                                                             \
   16 ┆ ┆ ┆ fprintf(stderr, "Test failed: %s\n", #expr);                             \
   17 ┆ ┆ ┆ exit(1);                                                                 \
   18 ┆ ┆ } else {                                                                   \
   19 ┆ ┆ ┆ printf("Test passed: %s\n", #expr);                                      \
   20 ┆ ┆ }                                                                          \
   21 ┆ }
   22
   23 typedef struct node {
   24 ┆ uint64_t data;
   25 ┆ struct node *next;
   26 } node_t;
   27
   28 node_t *head = NULL;
   29
   30 void insert_sorted(uint64_t data) {
   31 ┆ node_t *new_node = malloc(sizeof(node_t));
   32 ┆ new_node->data = data;
   33 ┆ new_node->next = NULL;
   34 ┆
   35 ┆ if (head == NULL) {
   36 ┆ ┆ head = new_node;
   37 ┆ } else {
   38 ┆ ┆ node_t *curr = head;
   39 ┆ ┆ node_t *prev = NULL;
   40 ┆ ┆
   41 ┆ ┆ bool inserted = false;
   42 ┆ ┆ while (curr != NULL && !inserted) {
   43 ┆ ┆ ┆ if (data < curr->data) {
W  44 ┆ ┆ ┆ ┆ prev->next = new_node;     ■ Access to field 'next' results in a dereference of a null p
   45 ┆ ┆ ┆ ┆ new_node->next = curr;
   46 ┆ ┆ ┆ ┆ inserted = true;
   47 ┆ ┆ ┆ }
 INSERT  example_1.c | +                                         W: 4  unix | utf-8 | c    1%    1:21

